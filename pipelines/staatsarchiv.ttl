@base <http://example.org/pipeline/> .
@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<this> a p:Pipeline, p:ReadableObjectMode;
  p:variables [
    p:variable [
      a p:Variable;
      p:name "filename";
      p:value "metadata/void.ttl";
    ];
    p:variable [
      a p:Variable;
      p:name "empty";
      p:value "empty.ttl";
    ];
    p:variable [
      a p:Variable;
      p:name "source";
      p:value "http://localhost:5820/bundesbudget";
    ];
    p:variable [
      a p:Variable;
      p:name "sink";
      p:value "http://localhost:5820/test-sink";
    ];
    p:variable [
      a p:Variable;
      p:name "source-graph";
      p:value "default";
    ];
    p:variable [
      a p:Variable;
      p:name "sink-graph";
      p:value "https://linked.opendata.swiss/graph/bs/staatsarchiv-bs";
    ]
  ];
  p:steps [
#    p:stepList (<readFile> <parse> <gYear> <serializeNTriples>)
    p:stepList (<readFile> <graph-store-get> <parse> <serializeNTriples> <graph-store-put>)
  ].

<readFile> a p:Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("filename"^^p:VariableName).

<empty> a p:Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("empty"^^p:VariableName).

<parse> a p:Step ;
  code:implementedBy [
    code:link <node:barnard59-formats/lib/n3.js#parse> ;
    a code:EcmaScript
] .

<gYear> a p:Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ("""
    quad => {
      const rdf = require('rdf-ext')
      const gYear = RegExp(/^\\d{4}$/)

      if (quad.predicate.equals(rdf.namedNode('http://www.w3.org/2004/02/skos/core#prefLabel')) && gYear.test(quad.object.value)) {
        return rdf.quad(quad.subject, rdf.namedNode('https://finance.ld.admin.ch/bundesbudget/dimension/year'), rdf.literal(quad.object.value, rdf.namedNode('http://www.w3.org/2001/XMLSchema#gYear')))
      }
  
      return quad
    }
  """^^code:EcmaScript) .

<serializeNTriples> a p:Step;
	code:implementedBy [ a code:EcmaScript;
		code:link <node:barnard59-formats#ntriples.serialize>
].

<graph-store-get> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-shell>;
    a code:EcmaScript
  ];
#  code:arguments ("curl" "-s" "--noproxy"  "localhost" "-n" "-G" "-H" "Accept: application/n-triples" "source"^^p:VariableName "--data-urlencode" "graph=${source-graph}"^^code:EcmaScriptTemplateLiteral) .
  code:arguments ("curl" "-s" "--noproxy"  "localhost" "-n" "-G" "-H" "Accept: application/n-triples" "source"^^p:VariableName "--data-urlencode" "graph=default") .


<graph-store-put> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-shell>;
    a code:EcmaScript
  ];
  #code:arguments ("curl" "-s" "-n" "-X" "PUT" "-H" "Content-Type: application/n-triples" "-T" "-" "-G" "sink"^^p:VariableName "--data-urlencode" "graph=${sink-graph}"^^code:EcmaScriptTemplateLiteral) .
  code:arguments ("curl" "-s" "-n" "-X" "PUT" "-H" "Content-Type: application/n-triples" "-T" "-" "-G" "sink"^^p:VariableName "--data-urlencode" "graph=https://linked.opendata.swiss/graph/bs/staatsarchiv-bs") .