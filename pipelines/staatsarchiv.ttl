@base <http://example.org/pipeline/> .
@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<shell> a p:Pipeline, p:ReadableObjectMode;
  p:variables [
    p:variable [
      a p:Variable;
      p:name "filename";
      p:value "metadata/void.ttl";
    ]
  ];
  p:steps [
    p:stepList (<readFile> <parse> <gYear> <serializeNTriples>)
  ].

<readFile> a p:Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("filename"^^p:VariableName).

<parse> a p:Step ;
  code:implementedBy [
    code:link <node:barnard59-formats/lib/n3.js#parse> ;
    a code:EcmaScript
] .

<gYear> a p:Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ("""
    quad => {
      const rdf = require('rdf-ext')
      const gYear = RegExp(/^\\d{4}$/)

      if (quad.predicate.equals(rdf.namedNode('http://www.w3.org/2004/02/skos/core#prefLabel')) && gYear.test(quad.object.value)) {
        return rdf.quad(quad.subject, rdf.namedNode('https://finance.ld.admin.ch/bundesbudget/dimension/year'), rdf.literal(quad.object.value, rdf.namedNode('http://www.w3.org/2001/XMLSchema#gYear')))
      }
  
      return quad
    }
  """^^code:EcmaScript) .

<serializeNTriples> a p:Step;
	code:implementedBy [ a code:EcmaScript;
		code:link <node:barnard59-formats#ntriples.serialize>
].

<sed> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-shell>;
    a code:EcmaScript
  ];
  code:arguments ("echo").
