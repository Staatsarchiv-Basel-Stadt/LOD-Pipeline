PREFIX rr: <http://www.w3.org/ns/r2rml#>
PREFIX rml: <http://semweb.mmlab.be/ns/rml#>
PREFIX ql: <http://semweb.mmlab.be/ns/ql#>
PREFIX carml: <http://carml.taxonic.com/carml/>
PREFIX contentLocationType: <http://id.loc.gov/vocabulary/preservation/contentLocationType/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX premis: <http://www.loc.gov/premis/rdf/v3/>
PREFIX rdact: <http://rdaregistry.info/termList/RDACarrierType/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX relSubType: <http://id.loc.gov/vocabulary/preservation/relationshipSubType>
PREFIX rico: <https://www.ica.org/standards/RiC/ontology#>
PREFIX schema: <http://schema.org/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX stabs-ext: <https://ld.bs.ch/RiC/vocabularies/extentTypes/>
PREFIX stabs-idt: <https://ld.bs.ch/RiC/vocabularies/identifierTypes/>
PREFIX stabs-rico: <https://ld.bs.ch/ontologies/StABS-RiC/>
PREFIX stabs-rst: <https://ld.bs.ch/RiC/vocabularies/recordSetTypes/>
PREFIX stabs-tht: <https://ld.bs.ch/RiC/vocabularies/thesaurusTypes/>
PREFIX unit: <http://qudt.org/vocab/unit/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

<#rr_stabs>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$.*"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:title;
		rr:objectMap [
			rml:reference "TITEL";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:identifier;
		rr:objectMap [
			rml:reference "SIGNATUR"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:date;
		rr:objectMap [
			rml:reference "ENTSTEHUNGSZEITRAUM"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:scopeAndContent;
		rr:objectMap [
			rml:reference "DARIN";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:scopeAndContent;
		rr:objectMap [
			rml:reference "ENTHAELT";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:type;
		rr:objectMap [
			rml:reference "ARCHIVALIENART";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:conditionsOfAccess;
		rr:objectMap [
			rml:reference "ZUGANGSBESTIMMUNGEN";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:conditionsOfUse;
		rr:objectMap [
			rml:reference "ZUGAENGLICHKEIT_NM";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:generalDescription;
		rr:objectMap [
			rml:reference "ANMERKUNGEN";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate dcterms:isReferencedBy;
		rr:objectMap [
			rr:template "https://dls.staatsarchiv.bs.ch/records/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso;
		rr:objectMap [
			rr:template "https://dls.staatsarchiv.bs.ch/records/{ID_NR}"
		]
	].
	
<#level_archive>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ID_NR == '548575')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}";
		rr:class rico:RecordSet
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:history;
		rr:objectMap [
			rml:reference "ARCHIVGESCHICHTE";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Archiv
		]
	].
	
<#level_abt>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Abteilung$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Abteilung
		]
	].
	
<#level_fon>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Fonds$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Fonds
		]
	].
	
<#level_bes>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Bestand$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Bestand
		]
	].
	
<#level_ser>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Serie$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Serie
		]
	].
	
<#level_dos>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Dossier$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:Dossier
		]
	].
	
<#level_abt_ser_dos>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Abteilung$|^Serie$|^Dossier$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}";
		rr:class rico:RecordSet
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isIncludedInTransitive;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{PARENT_ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:history;
		rr:objectMap [
			rml:reference "BESTANDSGESCHICHTE";
			rr:language "ger"
		]
	].
	
<#level_fon_bes>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /Fonds|Bestand/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}";
		rr:class rico:RecordSet
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isIncludedInTransitive;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{PARENT_ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:history;
		rr:objectMap [
			rml:reference "VERWALTUNGSGESCHICHTE_BIOGRAFI";
			rr:language "ger"
		]
	].
	
<#level_dok>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.STUFE =~ /^Dokument$/)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}";
		rr:class rico:Record
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isIncludedInTransitive;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{PARENT_ID_NR}"
		]
	].
	
<#date_01>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ENTSTEHUNGSZEITRAUM)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Date";
		rr:class rico:Date
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isDateAssociatedWith;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:expressedDate;
		rr:objectMap [
			rml:reference "ENTSTEHUNGSZEITRAUM"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:normalizedDateValue;
		rr:objectMap [
			rml:reference "ENTSTEHUNGSZEITRAUM"
		]
	].
	
<#date_02>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ENTSTEHUNGSZEITRAUM)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isAssociatedWithDate;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Date"
		]
	].
	
<#ident_01>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ALTE_SIGNATUREN || @.FRUEHERE_STABS_SIGNATUR || @.FRUEHERE_SIGNATUR)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Old-Reference/{ALTE_SIGNATUREN}";
		rr:class rico:Identifier
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasIdentifierOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasIdentifierType;
		rr:objectMap [
			rr:constant stabs-idt:Alte_Signatur
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:textualValue;
		rr:objectMap [
			rml:reference "ALTE_SIGNATUREN"
		]
	].
	
<#ident_02>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ALTE_SIGNATUREN || @.FRUEHERE_STABS_SIGNATUR || @.FRUEHERE_SIGNATUR)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Former-Reference/{FRUEHERE_SIGNATUR}";
		rr:class rico:Identifier
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasIdentifierOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasIdentifierType;
		rr:objectMap [
			rr:constant stabs-idt:Fruehere_Signatur
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:textualValue;
		rr:objectMap [
			rml:reference "FRUEHERE_SIGNATUR"
		]
	].
	
<#ident_03>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ALTE_SIGNATUREN || @.FRUEHERE_STABS_SIGNATUR || @.FRUEHERE_SIGNATUR)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Former-StABS-Reference/{FRUEHERE_STABS_SIGNATUR}";
		rr:class rico:Identifier
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasIdentifierOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasIdentifierType;
		rr:objectMap [
			rr:constant stabs-idt:Fruehere_StABS_Signatur
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:textualValue;
		rr:objectMap [
			rml:reference "FRUEHERE_STABS_SIGNATUR"
		]
	].
	
<#extent_lm>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ANZAHL || @.ANZAHL_DATEIEN || @.DATENVOLUMEN_MB || @.KOMMENTAR_ZUM_UMFANG || @.LAUFMETER || @.UMFANG_GESCHAETZT)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Extent/linear-meters";
		rr:class rico:RecordResourceExtent
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isExtentOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasExtentType;
		rr:objectMap [
			rr:constant stabs-ext:Laufmeter
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:quantity;
		rr:objectMap [
			rml:reference "LAUFMETER";
			rr:datatype xsd:decimal
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasUnitOfMeasurement;
		rr:objectMap [
			rr:constant unit:M
		]
	].
	
<#extent_num>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ANZAHL || @.ANZAHL_DATEIEN || @.DATENVOLUMEN_MB || @.KOMMENTAR_ZUM_UMFANG || @.LAUFMETER || @.UMFANG_GESCHAETZT)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Extent/number-of-units";
		rr:class rico:RecordResourceExtent
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isExtentOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasExtentType;
		rr:objectMap [
			rr:constant stabs-ext:Anzahl
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:quantity;
		rr:objectMap [
			rml:reference "ANZAHL";
			rr:datatype xsd:integer
		]
	].
	
<#extent_num_files>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ANZAHL || @.ANZAHL_DATEIEN || @.DATENVOLUMEN_MB || @.KOMMENTAR_ZUM_UMFANG || @.LAUFMETER || @.UMFANG_GESCHAETZT)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Extent/number-of-files";
		rr:class rico:RecordResourceExtent
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isExtentOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasExtentType;
		rr:objectMap [
			rr:constant stabs-ext:Anzahl_Dateien
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:quantity;
		rr:objectMap [
			rml:reference "ANZAHL_DATEIEN";
			rr:datatype xsd:integer
		]
	].
	
<#extent_data_vol>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ANZAHL || @.ANZAHL_DATEIEN || @.DATENVOLUMEN_MB || @.KOMMENTAR_ZUM_UMFANG || @.LAUFMETER || @.UMFANG_GESCHAETZT)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Extent/volume-of-data";
		rr:class rico:RecordResourceExtent
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isExtentOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasExtentType;
		rr:objectMap [
			rr:constant stabs-ext:Datenvolumen_MB
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:quantity;
		rr:objectMap [
			rml:reference "DATENVOLUMEN_MB";
			rr:datatype xsd:decimal
		]
	].
	
<#extent_approx>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ANZAHL || @.ANZAHL_DATEIEN || @.DATENVOLUMEN_MB || @.KOMMENTAR_ZUM_UMFANG || @.LAUFMETER || @.UMFANG_GESCHAETZT)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/Extent/extent-approximative";
		rr:class rico:RecordResourceExtent
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isExtentOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasExtentType;
		rr:objectMap [
			rr:constant stabs-ext:Umfang_approximativ
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:textualValue;
		rr:objectMap [
			rml:reference "UMFANG_GESCHAETZT"
		]
	].
	
<#hgb_records>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.ALTE_HAUSNUMMER || @.EIGENTUEMER_1862 || @.HAUSNAME)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}";
		rr:class stabs-rico:RecordHGB
	];
	
	rr:predicateObjectMap [
		rr:predicate stabs-rico:houseNameBS;
		rr:objectMap [
			rml:reference "HAUSNAME";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate stabs-rico:oldHousenumber;
		rr:objectMap [
			rml:reference "ALTE_HAUSNUMMER";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate stabs-rico:owner1862;
		rr:objectMap [
			rml:reference "EIGENTUEMER_1862";
			rr:language "ger"
		]
	].
	
<#bib_records>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.VEROEFFENTLICHUNGEN || @.LITERATUR_BEST_INSG)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/BibliographicResource";
		rr:class dcterms:BibliographicResource;
		rr:class rico:RecordSet
	];
	
	rr:predicateObjectMap [
		rr:predicate dcterms:bibliographicCitation;
		rr:objectMap [
			rml:reference "LITERATUR_BEST_INSG"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate dcterms:bibliographicCitation;
		rr:objectMap [
			rml:reference "VEROEFFENTLICHUNGEN"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate dcterms:subject;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasOrHadSubject;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasRecordSetType;
		rr:objectMap [
			rr:constant stabs-rst:BibRes
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:name;
		rr:objectMap [
			rr:template "Bibliografische Ressourcen zu {SIGNATUR}";
			rr:termType rr:Literal
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:scopeAndContent;
		rr:objectMap [
			rml:reference "VEROEFFENTLICHUNGEN"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:scopeAndContent;
		rr:objectMap [
			rml:reference "LITERATUR_BEST_INSG"
		]
	].
	
<#records_bib>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.VEROEFFENTLICHUNGEN || @.LITERATUR_BEST_INSG)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasSubjectOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}/BibliographicResource"
		]
	].
	
<#inst_01>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.files_are_public == true && @.STATUS_URHEBER_RECHT =~ /^Staatsarchiv|^Gemeinfrei/)] "
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Instantiation/{ID_NR}-d01";
		rr:class rico:Instantiation;
		rr:class premis:Representation
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasDigitalInstantiationOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{ID_NR}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:identifier;
		rr:objectMap [
			rr:template "{ID_NR}-di01";
			rr:termType rr:Literal
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:hasCarrierType;
		rr:objectMap [
			rr:constant rdact:1018
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:physicalCharacteristicsNote;
		rr:objectMap [
			rml:reference "PHYSISCHE_BESCHAFFENHEIT"
		]
	].
	
<#file_01>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.s3_path)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class premis:File;
		rr:class schema:MediaObject
	];
	
	rr:predicateObjectMap [
		rr:predicate relSubType:isp;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Instantiation/{record.identifier}-d01"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate premis:storedAt;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/File/{identifier}/Location"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate schema:contentUrl;
		rr:objectMap [
			rr:template "https://sos-ch-dk-2.exo.io/hft-stabs-dls-test/{s3_path}{original_filename}";
			rr:termType rr:Literal
		]
	].
	
<#file_audio>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.media_type == 'audio')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class schema:AudioObject
	].
	
<#file_image>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.media_type == 'image')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class schema:ImageObject
	].
	
<#file_txt>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.media_type == 'txt')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class schema:TextObject
	].
	
<#file_video>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.media_type == 'video')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class schema:VideoObject
	].
	
<#file_warc>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.media_type == 'warc')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}";
		rr:class schema:MediaObject
	].
	
<#storage>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.s3_path)]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/File/{identifier}/Location";
		rr:class premis:StorageLocation
	];
	
	rr:predicateObjectMap [
		rr:predicate premis:medium;
		rr:objectMap [
			rr:constant contentLocationType:uri
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rdf:value;
		rr:objectMap [
			rr:template "https://sos-ch-dk-2.exo.io/hft-stabs-dls-test/{s3_path}{original_filename}";
			rr:termType rr:Literal
		]
	].
	
<#thes_pers>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.thesaurus == 'Personenbegriffe')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Agent/{identifier}";
		rr:class rico:Agent;
		rr:class skos:Concept
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:generalDescription;
		rr:objectMap [
			rml:reference "description";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isAgentAssociatedWithAgent;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Agent/{related_descriptor_set[?(@.role == 'siehe auch')].to_descriptor.identifier}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasMainSubjectOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{descriptor_record_relations[*].record.identifier}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:name;
		rr:objectMap [
			rml:reference "title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:altLabel;
		rr:objectMap [
			rml:reference "related_descriptor_set[?(@.role == 'benutzt für')].to_descriptor.title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:inScheme;
		rr:objectMap [
			rr:constant stabs-tht:Personenbegriffe
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:note;
		rr:objectMap [
			rml:reference "description";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:prefLabel;
		rr:objectMap [
			rml:reference "title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:related;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Agent/{related_descriptor_set[?(@.role == 'siehe auch')].to_descriptor.identifier}"
		]
	].
	
<#thes_ort>
	a rr:TriplesMap;
	
	rml:logicalSource [
		rml:source [
			a carml:Stream;
			carml:streamName "stdin"
		];
		rml:referenceFormulation ql:JSONPath;
		rml:iterator "$..[?(@.thesaurus == 'Ortsbegriffe')]"
	];
	
	rr:subjectMap [
		rr:template "https://ld.bs.ch/ais/Place/{identifier}";
		rr:class rico:Place;
		rr:class skos:Concept
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:generalDescription;
		rr:objectMap [
			rml:reference "description";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isAssociatedWithPlace;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Place/{related_descriptor_set[?(@.role == 'siehe auch')].to_descriptor.identifier}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:isOrWasMainSubjectOf;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Record/{descriptor_record_relations[*].record.identifier}"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate rico:name;
		rr:objectMap [
			rml:reference "title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:altLabel;
		rr:objectMap [
			rml:reference "related_descriptor_set[?(@.role == 'benutzt für')].to_descriptor.title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:inScheme;
		rr:objectMap [
			rr:constant stabs-tht:Ortsbegriffe
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:note;
		rr:objectMap [
			rml:reference "description";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:prefLabel;
		rr:objectMap [
			rml:reference "title";
			rr:language "ger"
		]
	];
	
	rr:predicateObjectMap [
		rr:predicate skos:related;
		rr:objectMap [
			rr:template "https://ld.bs.ch/ais/Place/{related_descriptor_set[?(@.role == 'siehe auch')].to_descriptor.identifier}"
		]
	].
	
