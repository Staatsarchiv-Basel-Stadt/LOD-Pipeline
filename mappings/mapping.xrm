output carml

/* Basis-Maps for RecordResouces
 * -----------------------------
 * - for all instances of rico:RecordResource
 */
map rr_stabs from stabs_ogd.rr_base {
  subject template rrURI with ID_NR;

  properties
    rico.title from TITEL with language-tag ger;
    rico.identifier from SIGNATUR;
    rico.scopeAndContent from DARIN with language-tag ger; // Hervorzuhebende Inhalte von 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
    rico.scopeAndContent from ENTHAELT with language-tag ger; // Hauptgegenstand von isadg 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
    rico.scopeAndContent from INHALT with language-tag ger; // V.a. bei AV-Medien @todo: sollte in Unterklasse oder -property modelliert werden
    rico.^type from ARCHIVALIENART with language-tag ger; // @todo: sollte als Klasse modelliert werden, s.u. je Klassenlevel
    rico.conditionsOfAccess from ZUGANGSBESTIMMUNGEN with language-tag ger; // ausbauen gemäss Regelwerk (Klasse rico:Rule)
    rico.conditionsOfUse from ZUGAENGLICHKEIT_NM with language-tag ger; // besser als Klasse zu lösen (rico:Rule)
    rico.note from ANMERKUNGEN with language-tag ger;
    stabsrico.person from PERSON with language-tag ger; // besser als Klasse zu lösen (rico:Agent / rico:Person)
//    rico.hasRecordSetType template rstypeURI with STUFE; // @todo https://github.com/zazuko/expressive-rdf-mapper/issues/15, geht aber nicht mit dynamischen Werten
    rdfs.seeAlso template dlsURI with ID_NR;
}

/* Description Level Classes
 * -------------------------
 * - builds the main RecordResource Relations (include)
 */
map level_archive from stabs_ogd.rr_arc {
  subject template rrURI with ID_NR;

  types
    rico.RecordSet

  properties
    rico.history from ARCHIVGESCHICHTE with language-tag ger; // @todo: use rico.Event class later
    rico.hasRecordSetType constant stabsrst.Archiv;
}

map level_abt from stabs_ogd.rr_abt {
  subject template rrURI with ID_NR;

  properties
    rico.hasRecordSetType constant stabsrst.Abteilung;
}

map level_fon from stabs_ogd.rr_fon {
  subject template rrURI with ID_NR;

  properties
    rico.hasRecordSetType constant stabsrst.Fonds;
}

map level_bes from stabs_ogd.rr_bes {
  subject template rrURI with ID_NR;

  properties
    rico.hasRecordSetType constant stabsrst.Bestand;
}

map level_ser from stabs_ogd.rr_ser {
  subject template rrURI with ID_NR;

  properties
    rico.hasRecordSetType constant stabsrst.Serie;
}

map level_dos from stabs_ogd.rr_dos {
  subject template rrURI with ID_NR;

  properties
    rico.hasRecordSetType constant stabsrst.Dossier;
}

map level_abt_ser_dos from stabs_ogd.rr_abt_ser_dos {
  subject template rrURI with ID_NR;

  types
    rico.RecordSet

  properties
    rico.isDirectlyIncludedIn template rrURI with PARENT_ID_NR;
    rico.history from BESTANDSGESCHICHTE with language-tag ger;
}

map level_fon_bes from stabs_ogd.rr_fon_bes {
  subject template rrURI with ID_NR;

  types
    rico.RecordSet

  properties
    rico.isDirectlyIncludedIn template rrURI with PARENT_ID_NR;
//    rico.hasOrganicProvenance from AKTENBILDNER_PROVENIENZ_TEXT with language-tag ger; kann nicht als datatype property verwendet werden
    rico.history from VERWALTUNGSGESCHICHTE_BIOGRAFI with language-tag ger;
}

map level_dok from stabs_ogd.rr_dok {
  subject template rrURI with ID_NR;

  types
    rico.Record

  properties
    rico.isDirectlyIncludedIn template rrURI with PARENT_ID_NR;
}

/* Date Maps
 * ---------
 * - Entstehungszeitraum
 */
map date_01 from stabs_ogd.rr_date {
  subject template dateURI with ID_NR;

  types
    rico.Date

  properties
    rico.isOrWasAccumulationDateOfAllMembersOf template rrURI with ID_NR;
    rico.expressedDate from ENTSTEHUNGSZEITRAUM; // @todo: mit Datumsoperatoren könnte eine bessere Textrepräsentation erreicht werden.
    rico.normalizedDateValue from ENTSTEHUNGSZEITRAUM; // @todo: XML Date types für Typisierung
//    rico.hasDateType // Definiert in RiC-O 1.0 für Klassen `DateSet`, `DateRange` oder `SingleDate`, oder Subklassen. Bei Bedarf implementieren
//    rico.qualifier kann für "certainty" und "precision" verwendet werden, Implementierung bei Bedarf
}

map date_02 from stabs_ogd.rr_date {
  subject template rrURI with ID_NR;

  properties
    rico.hasOrHadAllMembersWithAccumulationDate template dateURI with ID_NR;
}

//    created_start created_end
//    :1999090 a rico:Date
//    rico.isEndDateOf :rrUri/1234
//    rico.isCreationDateOf rrUri/1324
//    rico.dateStandard

// ais_modified rico:isLastUpdateDateOf rrUri/1234
// ais_created rico:

/* Identity Maps
 * -------------
 * - Alte Signaturen
 * - Frühere Signaturen
 * - Frühere StABS-Signatur
 */

map ident_01 from stabs_ogd.rr_signaturen {
  subject template oldrefURI with ID_NR ALTE_SIGNATUREN;

  types
    rico.Identifier

  properties
    rico.isOrWasIdentifierOf template rrURI with ID_NR;
    rico.hasIdentifierType constant stabsidt.Alte_Signatur;
    rico.textualValue from ALTE_SIGNATUREN;
}

map ident_02 from stabs_ogd.rr_signaturen {
  subject template frmrefURI with ID_NR FRUEHERE_SIGNATUR;

  types
    rico.Identifier

  properties
    rico.isOrWasIdentifierOf template rrURI with ID_NR;
    rico.hasIdentifierType constant stabsidt.Fruehere_Signatur;
    rico.textualValue from FRUEHERE_SIGNATUR;
}

map ident_03 from stabs_ogd.rr_signaturen {
  subject template frmstabsrefURI with ID_NR FRUEHERE_STABS_SIGNATUR;

  types
    rico.Identifier

  properties
    rico.isOrWasIdentifierOf template rrURI with ID_NR;
    rico.hasIdentifierType constant stabsidt.Fruehere_StABS_Signatur;
    rico.textualValue from FRUEHERE_STABS_SIGNATUR;
}
/* Extent Maps
 * -----------
 * DE: LAUFMETER, ANZAHL, ANZAHL_DATEIEN, UMFANG_GESCHAETZT, KOMMENTAR_ZUM_UMFANG, DATENVOLUMEN_MB, ABSPIELDAUER
 */

map extent_as from stabs_ogd.rr_extent {
  subject template exdurURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Dauer;
    rico.quantity from ABSPIELDAUER with datatype xsd.string;
    rico.hasUnitOfMeasurement constant quanitity.Time;
}

map extent_lm from stabs_ogd.rr_extent {
  subject template exlmURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Laufmeter;
    rico.quantity from LAUFMETER with datatype xsd.decimal;
    rico.hasUnitOfMeasurement constant unit.M;
}

map extent_num from stabs_ogd.rr_extent {
  subject template exnumURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Anzahl;
    rico.quantity from ANZAHL with datatype xsd.integer;
    // rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
}

map extent_num_files from stabs_ogd.rr_extent {
  subject template exnumfileURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Anzahl_Dateien;
    rico.quantity from ANZAHL_DATEIEN with datatype xsd.integer;
    // rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
}

map extent_data_vol from stabs_ogd.rr_extent {
  subject template exdvURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Datenvolumen_MB;
    rico.quantity from DATENVOLUMEN_MB with datatype xsd.decimal;
    // rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
}

map extent_approx from stabs_ogd.rr_extent {
  subject template exapproxURI with ID_NR;

  types
    rico.RecordResourceExtent

  properties
    rico.isExtentOf template rrURI with ID_NR;
    rico.hasExtentType constant stabsext.Umfang_approximativ;
    rico.textualValue from UMFANG_GESCHAETZT;
}

// /* Provenienz
//  * ----------
//  * * erster Versuch
//  */
// map prov_1 from dls2ogd.PROV_1 {
//   subject template agURI with PR_ID;

//   types
//     rico.Agent

//   properties
//     rico.name from PR_NAME;
//     rico.isProvenanceOf template rrURI with VE_ID; // RiC-O 1.0 neu rico:hasOrganicOrFunctionalProvenance und verwandte Properties
// }

/* Verwaltungsgeschichte / Biografische Angaben
 * --------------------------------------------
 * (prüfen, ob als Event/1234 rico:isEventAssociatedWith Record/1234)
 */
// map bioghist_2 from stabs_ogd.rr_base {
//   subject template agURI with PR_ID;

//   types
//     rico.Agent

//   properties
//     rico.history from GESCHICHTE with language-tag ger;
//     rico.hasOrHadLocation from ORT; // ORT als subject URI
//     rico.isOrWasPartOf from ORGANISATIONSZUGEHOERIGKEIT; // @todo als subject URI
// }

/* Historisches Grundbuch (HGB)
* -----------------------------
*/
map hgb_records from stabs_ogd.rr_hgb {
  subject template rrURI with ID_NR;

  types
    stabsrico.RecordHGB

  properties
    stabsrico.houseNameBS from HAUSNAME with language-tag ger;
    stabsrico.oldHousenumber from ALTE_HAUSNUMMER with language-tag ger;
    stabsrico.owner1862 from EIGENTUEMER_1862 with language-tag ger;
}

/* Literatur (Bibliografie)
/  ------------------------
*/

map bib_records from stabs_ogd.rr_biblio {
  subject template bibURI with ID_NR;

  types
    dct.BibliographicResource
    rico.RecordSet

  properties
    dct.bibliographicCitation from LITERATUR_BEST_INSG;
    dct.bibliographicCitation from VEROEFFENTLICHUNGEN;
    dct.^subject template rrURI with ID_NR;
    rico.hasOrHadSubject template rrURI with ID_NR;
    rico.hasRecordSetType constant stabsrst.BibRes;
    rico.name template "Bibliografische Ressourcen zu {0}" with SIGNATUR as Literal;
    rico.scopeAndContent from VEROEFFENTLICHUNGEN;
    rico.scopeAndContent from LITERATUR_BEST_INSG;
}

map records_bib from stabs_ogd.rr_biblio {
  subject template rrURI with ID_NR;

  properties
    rico.isOrWasSubjectOf template bibURI with ID_NR;
}

/* Nutzungs und Zugang (Regeln)
/  ----------------------------
/  - Urheberrechtsstatus
/  - [weitere]
*/

map ar_freeonline from stabs_ogd.rr_ar_freeonline {
  subject template rrURI with ID_NR ;

  properties
    rico.isAssociatedWithRule constant stabsacr.freeonline ;
}

map ar_orderablerr from stabs_ogd.rr_ar_orderablerr {
  subject template rrURI with ID_NR ;

  properties
    rico.isAssociatedWithRule constant stabsacr.orderablerr ;
}

map ar_orderablerp from stabs_ogd.rr_ar_orderablerp {
  subject template rrURI with ID_NR ;

  properties
    rico.isAssociatedWithRule constant stabsacr.orderablerp ;
}

map ar_protected from stabs_ogd.rr_ar_protected {
  subject template rrURI with ID_NR ;

  properties
    rico.isAssociatedWithRule constant stabsacr.protected ;
}

map cr_pd from stabs_ogd.rr_cr_pd {
  subject template rrURI with ID_NR;

  properties
    rico.isAssociatedWithRule constant stabscrs.pd ;
}

map cr_sa from stabs_ogd.rr_cr_sa {
  subject template rrURI with ID_NR;

  properties
    rico.isAssociatedWithRule constant stabscrs.sa ;
}

map cr_un from stabs_ogd.rr_cr_un {
  subject template rrURI with ID_NR;

  properties
    rico.isAssociatedWithRule constant stabscrs.un ;
}

map cr_cr from stabs_ogd.rr_cr_cr {
  subject template rrURI with ID_NR;

  properties
    rico.isAssociatedWithRule constant stabscrs.cr ;
}

map cr_or from stabs_ogd.rr_cr_or {
  subject template rrURI with ID_NR;

  properties
    rico.isAssociatedWithRule constant stabscrs.or ;
}

/* Instantiationen
/  ---------------
*/

/* freie digitale Instantiationen
/
*/

map inst_01 from stabs_ogd.free_digital_inst {
  subject template freedigiinstURI with ID_NR;

  types
    rico.Instantiation
    premis.Representation

  properties
    rico.isOrWasDigitalInstantiationOf template rrURI with ID_NR;
    rico.isAssociatedWithRule constant stabsacr.freeonline ;
    rico.identifier template "{0}-fr01" with ID_NR as Literal;
    rico.hasCarrierType constant rdact._1018;
//    rico.hasProductionTechniqueType constant "rico:ProductionTechniqueType"; // @todo rico:ProductionTechniqueType
//    rico.hasRepresentationType constant "http://rdaregistry.info/termList/RDAMediaType/1003"; // @todo, genauer mit mediatype auf files-Ebene, siehe auch rico:RepresentationType
//    rico.instantiationExtent constant "anzahl dateien"; // @todo wenn möglich, Anzahl Dateien oder Dateigrösse(n). Kaum umsetzbar
    rico.physicalCharacteristicsNote from PHYSISCHE_BESCHAFFENHEIT with language-tag ger;
//    rico.hasOrHadLegalStatus from STATUS_URHEBER_RECHT with language-tag ger; // @todo: erstelle rico:Rule und verbinde RR und INST damit
}

/* Videoinstantiationen */

map inst_02 from stabs_ogd.video_inst {
  subject template videoinstURI with ID_NR;

  types
    rico.Instantiation
    ebucore.MediaResource
    ebucoreplus.MediaResource

  properties
    rico.isOrWasAnalogueInstantiationOf template rrURI with ID_NR;
    rico.identifier template "{0}-vi01" with ID_NR as Literal;
    rico.hasCarrierType constant rdact._1052;
    ebucore.hasFormat from FORMAT_VIDEO;
    ebucoreplus.hasFormat from FORMAT_VIDEO;
    ebucore.hasVideoCodec from CODIERUNG;
    ebucoreplus.hasVideoCodec from CODIERUNG;
    ebucore.hasColourSpace from FARBE_BILDBEARBEITUNG;
    ebucoreplus.hasColourSpace from FARBE_BILDBEARBEITUNG;
    ebucore.aspectRatio from BILDFORMAT_FILM;
    ebucoreplus.aspectRatio from BILDFORMAT_FILM;
}

/* Filminstantiation */

map inst_03 from stabs_ogd.film_inst {
  subject template filminstURI with ID_NR;

  types
    rico.Instantiation
    ebucore.MediaResource
    ebucoreplus.MediaResource
  
  properties
    rico.isOrWasAnalogueInstantiationOf template rrURI with ID_NR;
    rico.identifier template "{0}-fi01" with ID_NR as Literal;
    ebucore.hasFormat from FORMAT_FILM;
    ebucoreplus.hasFormat from FORMAT_FILM;
    ebucore.hasColourSpace from FARBE_BILDBEARBEITUNG;
    ebucoreplus.hasColourSpace from FARBE_BILDBEARBEITUNG;
    ebucore.aspectRatio from BILDFORMAT_FILM;
    ebucoreplus.aspectRatio from BILDFORMAT_FILM;
    // from FORMAT_TON;
    // from FILMELEMENT;
  }

/* Trägertypen (Film, Ton) */

map crt_13029 from stabs_ogd.crt_13029 {
  subject template filminstURI with ID_NR;

  properties
    rico.hasCarrierType constant stabscrt._13029;
}

map crt_13030 from stabs_ogd.crt_13030 {
  subject template filminstURI with ID_NR;

  properties
    rico.hasCarrierType constant stabscrt._13030;
}

map crt_13031 from stabs_ogd.crt_13031 {
  subject template filminstURI with ID_NR;

  properties
    rico.hasCarrierType constant stabscrt._13031;
}

map crt_13042 from stabs_ogd.crt_13042 {
  subject template filminstURI with ID_NR;

  properties
    rico.hasCarrierType constant stabscrt._13042;
}

map crt_13043 from stabs_ogd.crt_13043 {
  subject template filminstURI with ID_NR;

  properties
    rico.hasCarrierType constant stabscrt._13043;
}

// map inst_02 from stabs_ogd.crstabs_digital_inst { // @todo: erstelle rico:Rule und verbinde RR und INST damit
//   subject template freedigiinstURI with ID_NR;

//   properties
//     rico.hasOrHadIntellectualPropertyRightsHolder constant "https://ld.bs.ch/org/staatsarchiv";
// }

/* Dateien & Objekte
/  -----------------
*/

 map file_01 from stabs_ogd.file_inst_01 {
  subject template fileURI with identifier;

  types
    premis.File

  properties
    relSubType.isp template freedigiinstURI with ID_NR;
    premis.storedAt template storageURI with identifier;
 }

 /* Storage */

 map storage from stabs_ogd.file_inst_01 {
  subject template storageURI with identifier;

  types
    premis.StorageLocation

  properties
    premis.medium constant contentLocationType.uri;
    rdf.value template contentLocationURI with s3_path original_filename as Literal;
 } 

/* Descriptors (scope Concept)
 * --------------------------
 */
 map thes_pers from stabs_ogd.ag_desc {
  subject template agURI with identifier;

  types
    rico.Agent
    skos.Concept

  properties
    rico.note from description with language-tag ger;
    rico.isAgentAssociatedWithAgent template agURI with related_agent_id;
    rico.isOrWasMainSubjectOf template rrURI with related_record_id;
    rico.name from title with language-tag ger;
    skos.altLabel from alternative_title with language-tag ger;
    skos.inScheme constant stabstht.Personenbegriffe;
    skos.note from description with language-tag ger;
    skos.prefLabel from title with language-tag ger;
    skos.related template agURI with related_agent_id;
//    rico.hasOrHadAgentName template Instanz von rico.AgentName // komplex in RiC-O
}

 map thes_ort from stabs_ogd.pl_desc {
  subject template plURI with identifier;

  types
    rico.Place
    skos.Concept

  properties
    rico.note from description with language-tag ger;
    rico.isAssociatedWithPlace template plURI with related_place_id;
    rico.isOrWasMainSubjectOf template rrURI with related_record_id;
    rico.name from title with language-tag ger;
    skos.altLabel from alternative_title with language-tag ger;
    skos.inScheme constant stabstht.Ortsbegriffe;
    skos.note from description with language-tag ger;
    skos.prefLabel from title with language-tag ger;
    skos.related template plURI with related_place_id;
  }

  map rr_principal from stabs_ogd.ag_rr_principal {
    subject template agURI with AUFTRAGGEBERIN;

    types
      rico.Agent
    
    properties
      rico.isOrganicOrFunctionalProvenanceOf template rrURI with ID_NR;
      rico.name from AUFTRAGGEBERIN with language-tag ger;
  }


/* Ablieferungen
 * ------------
 * sind rico:Activity-Instanzen
 * @todo: Activity-Types als Klasse (rico:Activity) mit rico:hasActivityType
 */

// map abl from dls2ogd.ABL {
//   subject template evURI with ID_NR;

//   types
//     rico.Activity

//   properties
//     rico.name template "Ablieferung Nr. {0}" with JAHR_LAUF_NR as Literal;
//     rico.identifier from ID_NR with datatype xsd.string;
//     rico.hasActivityType constant "https://ld.bs.ch/RiC/vocabularies/activityTypes";
//     rico.^type template "Typ {0} / Subtyp {1}" with TYP SUBTYP as Literal;
//     rico.agentOrActivityIsTargetOfProvenanceRelation from AKTENBILDENDE_STELLE; // @sicher falsch
//     rico.date from ZEITRAUM_PERIODE; // @todo: falsch, da nicht Zeitraum der Aktivität, sondern des Bestands
//     // rico.isAssociatedWithDate from ZEITRAUM_PERIODE;
// }

// map abl2ve from dls2ogd.VE_ABL_LINK {
//   subject template rrURI with ID_NR_VRZNG_ENHT;

//   properties
//     rico.resultsOrResultedFrom template evURI with ID_NR_ABLFR;
// }
