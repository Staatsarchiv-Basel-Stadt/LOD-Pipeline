[
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Telebasel\n\nSELECT aller Datenelemente, die zum Import des Archivs von Telebasel in die [Memobase](https://memobase.ch/) benötigt werden, inkl. der Links auf die digitalen Benutzungskopien für Streaming:\n\n*  Ausgangspunkt ist der Record des [Fonds **StABS PÖA-REG 17**](https://dls.staatsarchiv.bs.ch/records/1645848)\n* Umfasst alle inkludierten (untergeordneten) Records\n* Soweit benötigt weitere Metadaten wie Umfang (Abspieldauer der Videos), Datum, Titel, Signatur, etc.\n* gibt die URI der verlinkten digitalen Objekte aus",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# from file queries/select_telebasel.rq\r\nPREFIX void: <http://rdfs.org/ns/void#>\r\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\nPREFIX schema: <http://schema.org/>\r\nPREFIX dcterms: <http://purl.org/dc/terms/>\r\nPREFIX rico: <https://www.ica.org/standards/RiC/ontology#>\r\nPREFIX relSubType: <http://id.loc.gov/vocabulary/preservation/relationshipSubType/>\r\nPREFIX premis: <http://www.loc.gov/premis/rdf/v3/>\r\nPREFIX stabs-ext: <https://ld.bs.ch/RiC/vocabularies/extentTypes/>\r\nPREFIX stabs-rst: <https://ld.bs.ch/RiC/vocabularies/recordSetTypes/>\r\n\r\nSELECT ?ID ?record ?recordSetType ?Signatur ?Titel ?DLS_Link (GROUP_CONCAT(?Serie; separator=\"|\") as ?Serien) (GROUP_CONCAT(?SerieTitel; separator=\"|\") as ?SerienTitel) (GROUP_CONCAT(?Seriesignatur; separator=\"|\") as ?SerienID) (GROUP_CONCAT(?SerieDatum; separator=\"|\") as ?SerienDatum) ?Datum ?finalDate ?Abspieldauer ?fileURI ?conditionsOfAccess ?conditionsOfUse ?accessType ?description ?subject ?scopeAndContent ?genre ?keywords ?comments ?support\r\n\r\nWHERE {\r\n  GRAPH <https://ld.bs.ch/graph/ais-metadata> {\r\n    <https://ld.bs.ch/ais/Record/1645848> ^rico:isDirectlyIncludedIn* ?record .\r\n    \r\n    # To test with just one record\r\n    #BIND (<https://ld.bs.ch/ais/Record/1875656> as ?record) .\r\n    \r\n    # Exclude recordSet types Fonds, Bestand and Serie\r\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Fonds . }\r\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Bestand . }\r\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Serie . }\r\n    \r\n    OPTIONAL { ?record rico:hasRecordSetType ?recordSetType. }\r\n    \r\n    ?record rico:identifier ?Signatur  ;\r\n            rico:title ?Titel ;\r\n            dcterms:isReferencedBy ?DLS_Link .\r\n    \r\n    BIND ( substr(str(?record),29) AS ?ID)\r\n    \r\n    # Get information on series (filter by Type=Serie, Signatur containing a '()')\r\n    ?record rico:isDirectlyIncludedIn+ ?Serie .\r\n    ?Serie  rico:hasRecordSetType ?Serietyp ;\r\n            rico:identifier ?Seriesignatur .\r\n    FILTER (?Serietyp IN ( stabs-rst:Serie )) .\r\n    FILTER (contains(?Seriesignatur , '(')) .\r\n    ?Serie rico:title ?SerieTitel ;\r\n           rico:isAssociatedWithDate/rico:expressedDate ?SerieDatum . \r\n    \r\n    OPTIONAL { ?record rico:isAssociatedWithDate/rico:expressedDate ?Datum . \r\n      # Two options: single date or date range\r\n      BIND (IF(contains(?Datum, \"-\"), ?Datum, \"Null\") AS ?DateRange)\r\n      BIND (IF(contains(?Datum, \"-\"), \"Null\", ?Datum) AS ?SingleDate)\r\n      # Single date => extract year, month and day\r\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?SingleDateYear)\r\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?SingleDateMonth)\r\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?SingleDateDay)\r\n      # Single date => normalize month and day\r\n      BIND (IF(strlen(?SingleDateMonth) < 2, concat(\"0\",?SingleDateMonth), ?SingleDateMonth) AS ?SingleDateMonth1)\r\n      BIND (IF(strlen(?SingleDateDay) < 2, concat(\"0\",?SingleDateDay), ?SingleDateDay) AS ?SingleDateDay1)\r\n      # Date range\r\n      BIND (strbefore(?DateRange,\"-\") AS ?fromDate)\r\n      BIND (strafter(?DateRange,\"-\") AS ?toDate)\r\n      # Date range => extract year, month, day from first date\r\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?fromDateYear)\r\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?fromDateMonth)\r\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?fromDateDay)\r\n      # Date range => normalize month and day of first date\r\n      BIND (IF(strlen(?fromDateMonth) < 2, concat(\"0\",?fromDateMonth), ?fromDateMonth) AS ?fromDateMonth1)\r\n      BIND (IF(strlen(?fromDateDay) < 2, concat(\"0\",?fromDateDay), ?fromDateDay) AS ?fromDateDay1)\r\n      # Date range => extract year, month, day from second date\r\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?toDateYear)\r\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?toDateMonth)\r\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?toDateDay)\r\n      # Date range => normalize month and day of second date\r\n      BIND (IF(strlen(?toDateMonth) < 2, concat(\"0\",?toDateMonth), ?toDateMonth) AS ?toDateMonth1)\r\n      BIND (IF(strlen(?toDateDay) < 2, concat(\"0\",?toDateDay), ?toDateDay) AS ?toDateDay1)\r\n      # Cases\r\n      BIND ( \r\n        COALESCE(\r\n          IF(contains(?Datum, \"-\"),\r\n            COALESCE(\r\n              IF(strlen(?fromDateDay) = 0 && strlen(?fromDateMonth) = 0, concat(?fromDateYear,\"-\",?toDateYear), 1/0),\r\n              concat(?fromDateDay1,\".\",?fromDateMonth1,\".\",?fromDateYear,\"-\",?toDateDay1,\".\",?toDateMonth1,\".\",?toDateYear) ), \r\n            COALESCE(\r\n          IF(strlen(?SingleDateDay) = 0 && strlen(?SingleDateMonth) = 0, ?SingleDateYear, 1/0),\r\n              IF(strlen(?SingleDateDay) = 0, concat(?SingleDateMonth1, \".\", ?SingleDateYear), 1/0),\r\n              concat(?SingleDateDay1,  \".\", ?SingleDateMonth1, \".\", ?SingleDateYear) ))\r\n        ) AS ?finalDate)      \r\n    }\r\n    OPTIONAL { \r\n      ?record ^rico:isExtentOf ?extent .\r\n      ?extent rico:hasExtentType stabs-ext:Dauer ;\r\n              rico:quantity ?Abspieldauer . }\r\n    OPTIONAL { ?inst rico:isOrWasDigitalInstantiationOf ?record ;\r\n                     ^relSubType:isp/premis:storedAt/rdf:value ?fileURI. }\r\n    \r\n    OPTIONAL {?record rico:conditionsOfAccess ?conditionsOfAccess .}\r\n    OPTIONAL {?record rico:conditionsOfUse ?conditionsOfUse .\r\n      BIND(\r\n      COALESCE (\r\n        IF(regex(str(?conditionsOfUse), \"Oeffentlich\"), \"public\", 1/0),\r\n        IF(regex(str(?conditionsOfUse), \"Freigegeben für Online-Zugänglichkeit\"), \"public\", 1/0),\r\n        \"private\" ) as ?accessType)\r\n    }\r\n    OPTIONAL {?record rico:generalDescription ?description .\r\n    \r\n      BIND(STRBEFORE(STRAFTER(?description, \"- Genre: \"), \"\\n\") AS ?genre)\r\n      BIND(STRBEFORE(STRAFTER(?description, \"- Schlagworte: \"), \"\\n\") AS ?keywords)\r\n      BIND(STRBEFORE(STRAFTER(?description, \"- Kommentare: \"), \"\\n\") AS ?comments)\r\n      BIND(STRAFTER(?description, \"- Unterstützung bei der Erhaltung: \") AS ?support)\r\n    \r\n    }\r\n    OPTIONAL {?record rico:hasOrHadMainSubject ?subject .}\r\n    OPTIONAL {?record rico:scopeAndContent ?scopeAndContent .}\r\n    \r\n  }\r\n}\r\nGROUP BY ?ID ?record ?recordSetType ?Signatur ?Titel ?DLS_Link ?Datum ?finalDate ?Abspieldauer ?fileURI ?conditionsOfAccess ?conditionsOfUse ?accessType ?description ?subject ?scopeAndContent ?genre ?keywords ?comments ?support",
    "metadata": {
      "file": "queries/select_telebasel.rq"
    }
  }
]