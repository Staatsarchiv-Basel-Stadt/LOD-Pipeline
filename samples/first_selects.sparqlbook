[
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Telebasel\n\nSELECT aller Datenelemente, die zum Import des Archivs von Telebasel in die [Memobase](https://memobase.ch/) benötigt werden, inkl. der Links auf die digitalen Benutzungskopien für Streaming:\n\n*  Ausgangspunkt ist der Record des [Fonds **StABS PÖA-REG 17**](https://dls.staatsarchiv.bs.ch/records/1645848)\n* Umfasst alle inkludierten (untergeordneten) Records\n* Soweit benötigt weitere Metadaten wie Umfang (Abspieldauer der Videos), Datum, Titel, Signatur, etc.\n* gibt die URI der verlinkten digitalen Objekte aus",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# from file queries/select_telebasel.rq\n\nPREFIX void: <http://rdfs.org/ns/void#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX schema: <http://schema.org/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX rico: <https://www.ica.org/standards/RiC/ontology#>\nPREFIX relSubType: <http://id.loc.gov/vocabulary/preservation/relationshipSubType/>\nPREFIX premis: <http://www.loc.gov/premis/rdf/v3/>\nPREFIX stabs-ext: <https://ld.bs.ch/RiC/vocabularies/extentTypes/>\nPREFIX stabs-rst: <https://ld.bs.ch/RiC/vocabularies/recordSetTypes/>\n\nSELECT ?ID ?record ?Signatur ?Titel ?DLS_Link (GROUP_CONCAT(?Serie; separator=\"|\") as ?Serien) (GROUP_CONCAT(?SerieTitel; separator=\"|\") as ?SerienTitel) (GROUP_CONCAT(?Seriesignatur; separator=\"|\") as ?SerienID) (GROUP_CONCAT(?SerieDatum; separator=\"|\") as ?SerienDatum) ?Datum ?finalDate ?Abspieldauer ?fileURI ?conditionsOfAccess ?conditionsOfUse ?accessType ?description ?subject ?scopeAndContent\n\nWHERE {\n  GRAPH <https://ld.bs.ch/graph/ais-metadata> {\n    <https://ld.bs.ch/ais/Record/1645848> ^rico:isDirectlyIncludedIn* ?record .\n    \n    # Exclude recordSet types Fonds, Bestand and Serie\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Fonds . }\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Bestand . }\n    FILTER NOT EXISTS { ?record rico:hasRecordSetType stabs-rst:Serie . }\n    \n    ?record rico:hasRecordSetType ?Stufe ;\n            rico:identifier ?Signatur  ;\n            rico:title ?Titel ;\n            dcterms:isReferencedBy ?DLS_Link .\n    \n    BIND ( substr(str(?record),29) AS ?ID)\n    \n    # Get information on series (filter by Type=Serie, Signatur containing a '()')\n    ?record rico:isDirectlyIncludedIn+ ?Serie .\n    ?Serie  rico:hasRecordSetType ?Serietyp ;\n    \t\t    rico:identifier ?Seriesignatur .\n    FILTER (?Serietyp IN ( stabs-rst:Serie )) .\n    FILTER (contains(?Seriesignatur , '(')) .\n    ?Serie rico:title ?SerieTitel ;\n           rico:isAssociatedWithDate/rico:expressedDate ?SerieDatum . \n    \n    OPTIONAL { ?record rico:isAssociatedWithDate/rico:expressedDate ?Datum . \n      # Two options: single date or date range\n      BIND (IF(contains(?Datum, \"-\"), ?Datum, \"Null\") AS ?DateRange)\n      BIND (IF(contains(?Datum, \"-\"), \"Null\", ?Datum) AS ?SingleDate)\n      # Single date => extract year, month and day\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?SingleDateYear)\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?SingleDateMonth)\n      BIND (replace(?SingleDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?SingleDateDay)\n      # Single date => normalize month and day\n      BIND (IF(strlen(?SingleDateMonth) < 2, concat(\"0\",?SingleDateMonth), ?SingleDateMonth) AS ?SingleDateMonth1)\n      BIND (IF(strlen(?SingleDateDay) < 2, concat(\"0\",?SingleDateDay), ?SingleDateDay) AS ?SingleDateDay1)\n      # Date range\n      BIND (strbefore(?DateRange,\"-\") AS ?fromDate)\n      BIND (strafter(?DateRange,\"-\") AS ?toDate)\n      # Date range => extract year, month, day from first date\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?fromDateYear)\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?fromDateMonth)\n      BIND (replace(?fromDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?fromDateDay)\n      # Date range => normalize month and day of first date\n      BIND (IF(strlen(?fromDateMonth) < 2, concat(\"0\",?fromDateMonth), ?fromDateMonth) AS ?fromDateMonth1)\n      BIND (IF(strlen(?fromDateDay) < 2, concat(\"0\",?fromDateDay), ?fromDateDay) AS ?fromDateDay1)\n      # Date range => extract year, month, day from second date\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$1\") AS ?toDateYear)\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$2\") AS ?toDateMonth)\n      BIND (replace(?toDate,\"(\\\\d{4}).?(\\\\d{1,2})?.?(\\\\d{1,2})?\", \"$3\") AS ?toDateDay)\n      # Date range => normalize month and day of second date\n      BIND (IF(strlen(?toDateMonth) < 2, concat(\"0\",?toDateMonth), ?toDateMonth) AS ?toDateMonth1)\n      BIND (IF(strlen(?toDateDay) < 2, concat(\"0\",?toDateDay), ?toDateDay) AS ?toDateDay1)\n      # Cases\n      BIND ( \n        COALESCE(\n          IF(contains(?Datum, \"-\"),\n            COALESCE(\n          \t\tIF(strlen(?fromDateDay) = 0 && strlen(?fromDateMonth) = 0, concat(?fromDateYear,\"-\",?toDateYear), 1/0),\n            \tconcat(?fromDateDay1,\".\",?fromDateMonth1,\".\",?fromDateYear,\"-\",?toDateDay1,\".\",?toDateMonth1,\".\",?toDateYear) ), \n            COALESCE(\n    \t\t\tIF(strlen(?SingleDateDay) = 0 && strlen(?SingleDateMonth) = 0, ?SingleDateYear, 1/0),\n          \t\tIF(strlen(?SingleDateDay) = 0, concat(?SingleDateMonth1, \".\", ?SingleDateYear), 1/0),\n            \tconcat(?SingleDateDay1,  \".\", ?SingleDateMonth1, \".\", ?SingleDateYear) ))\n        ) AS ?finalDate)      \n    }\n    OPTIONAL { \n      ?record ^rico:isExtentOf ?extent .\n      ?extent rico:hasExtentType stabs-ext:Dauer ;\n              rico:quantity ?Abspieldauer . }\n    OPTIONAL { ?inst rico:isOrWasDigitalInstantiationOf ?record ;\n                     ^relSubType:isp/premis:storedAt/rdf:value ?fileURI. }\n    \n    OPTIONAL {?record rico:conditionsOfAccess ?conditionsOfAccess .}\n    OPTIONAL {?record rico:conditionsOfUse ?conditionsOfUse .\n      BIND(\n      COALESCE (\n        IF(regex(str(?conditionsOfUse), \"Oeffentlich\"), \"public\", 1/0),\n        IF(regex(str(?conditionsOfUse), \"Freigegeben für Online-Zugänglichkeit\"), \"public\", 1/0),\n        \"private\" ) as ?accessType)\n    }\n    OPTIONAL {?record rico:generalDescription ?description .}\n    OPTIONAL {?record rico:hasOrHadMainSubject ?subject .}\n    OPTIONAL {?record rico:scopeAndContent ?scopeAndContent .}\n    \n  }\n}\nGROUP BY ?ID ?record ?Signatur ?Titel ?DLS_Link ?Datum ?finalDate ?Abspieldauer ?fileURI ?conditionsOfAccess ?conditionsOfUse ?accessType ?description ?subject ?scopeAndContent",
    "metadata": {
      "file": "queries/select_telebasel.rq"
    }
  }
]